<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Laravel生命周期</title>
    <link href="/2023/08/03/Laravel%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2023/08/03/Laravel%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Laravel生命周期"><a href="#Laravel生命周期" class="headerlink" title="Laravel生命周期"></a>Laravel生命周期</h1><p><img src="https://s3.bmp.ovh/imgs/2023/08/03/ada43556c8d0cd07.jpg" alt="Laravel生命周期"></p><blockquote><p><strong>大概总结的生命周期如下：</strong></p><ol><li>入口文件public&#x2F;index.php</li><li>加载composer生成的vendor&#x2F;autoload.php</li><li>创建服务容器bootstrap&#x2F;app.php</li><li>加载Http核心，由于创建容器时完成了内核绑定，所以此处加载的核心是App\Http\Kernel</li><li>使用Kernel处理请求，此处将返回响应response</li><li>响应发送，设置header、响应报文body等</li><li>请求处理结束后续流程，中间件或事件的分发等</li></ol></blockquote><h2 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h2><blockquote><p><em>文件路径：public&#x2F;index.php</em></p><p>入口文件概括起来就是执行了3个操作</p><ol><li>加载项目依赖</li><li>创建 Laravel 服务容器</li><li>接收请求并响应</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 记录Laravel的启动时间</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;LARAVEL_START&#x27;</span>, <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>));<br><span class="hljs-comment">// 加载项目依赖</span><br><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../vendor/autoload.php&#x27;</span>;<br><span class="hljs-comment">// 创建服务容器</span><br><span class="hljs-variable">$app</span> = <span class="hljs-keyword">require_once</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../bootstrap/app.php&#x27;</span>;<br><span class="hljs-comment">// 创建Http核心</span><br><span class="hljs-variable">$kernel</span> = <span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">make</span>(<span class="hljs-title class_">Illuminate\Contracts\Http\Kernel</span>::<span class="hljs-variable language_">class</span>);<br><span class="hljs-comment">// 使用Http核心处理请求</span><br><span class="hljs-variable">$response</span> = <span class="hljs-variable">$kernel</span>-&gt;<span class="hljs-title function_ invoke__">handle</span>(<br>    // 创建请求<br>    <span class="hljs-variable">$request</span> = <span class="hljs-title class_">Illuminate\Http\Request</span>::<span class="hljs-title function_ invoke__">capture</span>()<br>);<br><span class="hljs-comment">// 请求处理完成后响应内容给客户端</span><br><span class="hljs-variable">$response</span>-&gt;<span class="hljs-title function_ invoke__">send</span>();<br><span class="hljs-comment">// 终止程序</span><br><span class="hljs-variable">$kernel</span>-&gt;<span class="hljs-title function_ invoke__">terminate</span>(<span class="hljs-variable">$request</span>, <span class="hljs-variable">$response</span>);<br></code></pre></td></tr></table></figure><h2 id="引导文件"><a href="#引导文件" class="headerlink" title="引导文件"></a>引导文件</h2><blockquote><p><em>文件路径：boostrap&#x2F;app.php</em><br>此文件主要就是创建了服务容器，并将内核以及异常处理器绑定到容器内</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 创建服务容器</span><br><span class="hljs-variable">$app</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Illuminate\Foundation\Application</span>(<br>    <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../&#x27;</span>)<br>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绑定HTTP内核</span><br><span class="hljs-comment"> * 由于此处将App\Http\Kernel::class</span><br><span class="hljs-comment"> * 绑定到Illuminate\Contracts\Http\Kernel::class</span><br><span class="hljs-comment"> * 所以后续使用容器make(Illuminate\Contracts\Http\Kernel::class)的时候</span><br><span class="hljs-comment"> * 实际上实例化的是App\Http\Kernel::class</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">singleton</span>(<br>    <span class="hljs-title class_">Illuminate\Contracts\Http\Kernel</span>::<span class="hljs-variable language_">class</span>,<br>    <span class="hljs-title class_">App\Http\Kernel</span>::<span class="hljs-variable language_">class</span><br>);<br><span class="hljs-comment">// 绑定Console内核</span><br><span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">singleton</span>(<br>    <span class="hljs-title class_">Illuminate\Contracts\Console\Kernel</span>::<span class="hljs-variable language_">class</span>,<br>    <span class="hljs-title class_">App\Console\Kernel</span>::<span class="hljs-variable language_">class</span><br>);<br><span class="hljs-comment">// 绑定异常处理器</span><br><span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">singleton</span>(<br>    <span class="hljs-title class_">Illuminate\Contracts\Debug\ExceptionHandler</span>::<span class="hljs-variable language_">class</span>,<br>    <span class="hljs-title class_">App\Exceptions\Handler</span>::<span class="hljs-variable language_">class</span><br>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$app</span>;<br></code></pre></td></tr></table></figure><h3 id="创建服务容器"><a href="#创建服务容器" class="headerlink" title="创建服务容器"></a>创建服务容器</h3><blockquote><p>在引导文件内 <code>new Illuminate\Foundation\Application</code> 创建容器<br>在构造函数内执行：</p><ol><li>绑定应用的基础路径</li><li>注册基础的服务提供者绑定到容器内</li><li>注册核心容器别名等绑定到容器内</li></ol></blockquote><h3 id="内核绑定"><a href="#内核绑定" class="headerlink" title="内核绑定"></a>内核绑定</h3><blockquote><p>在引导文件内使用 <code>$app-&gt;singleton()</code> 绑定内核<br>由于此时只是绑定了自定义的内核类的class<br>所以在使用 <code>$app-&gt;make()</code> 获取内核的时候才会首次进行实例化</p></blockquote><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><blockquote><p>当前环节的关键代码是<br>获取Http内核<br>获取当前请求对象并使用内核处理<br>内核处理完成后返回了响应对象<br>使用响应对象返回数据给客户端</p></blockquote><h3 id="创建内核实例"><a href="#创建内核实例" class="headerlink" title="创建内核实例"></a>创建内核实例</h3><blockquote><p>内核构造函数会将容器和路由绑定到当前内核中<br>并且将中间件的分组和别名绑定到路由中<br>中间件分组主要是方便api或web等多组路由绑定基础中间件的操作</p></blockquote><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><blockquote><p>在使用内核处理请求前，会使用 <code>Illuminate\Http\Request::capture()</code> 获取请求对象<br>创建请求时会将此次请求的query、post、files、cookies等数据绑定到请求对象中<br>然后调用内核的 <code>handle</code> 方法进行处理，此方法会执行以下流程：</p><ol><li>将请求对象注册到容器内，这样后续在控制器内也可以拿到当前的请求对象</li><li>清除之前请求对象的缓存</li><li>启动引导，这里主要是将内核中绑定的一些引导服务等执行</li><li>将请求发送到路由进行匹配以及处理</li><li>最终会返回响应对象</li></ol></blockquote><h3 id="返回响应"><a href="#返回响应" class="headerlink" title="返回响应"></a>返回响应</h3><blockquote><p>在入口文件中，内核处理完请求后返回了响应对象<br>调用 <code>$response-&gt;send();</code> 时将响应的header和报文内容发送到客户端<br>在这一步的时候请求和响应的处理就结束了</p></blockquote><h2 id="程序结束"><a href="#程序结束" class="headerlink" title="程序结束"></a>程序结束</h2><blockquote><p>在入口文件的最后<br>会调用 <code>$kernel-&gt;terminate($request, $response);</code> 来执行程序结束前的操作<br>这里主要是处理中间件的后续操作<br>因为中间件使用的是洋葱模型，处理请求时执行的是中间件的前半部分<br>此时返回了响应后，需要执行中间件的后半部分</p></blockquote><p><em><strong>完</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2023/08/03/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/08/03/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>斜体文字</em> <code>*斜体文字*</code></p><p><strong>粗体文字</strong> <code>**粗体文字**</code></p><p><em><strong>粗斜体文字</strong></em> <code>***粗斜体文字***</code></p><p><del>删除线</del> <code>~~删除线~~</code></p><p><u>下划线</u> <code>&lt;u&gt;下划线&lt;/u&gt;</code></p><h2 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://jarviscdr.github.io/">JarvisBlog</a> <code>[JarvisBlog](https://jarviscdr.github.io)</code></p><p><a href="https://jarviscdr.github.io/">https://jarviscdr.github.io</a> <code>&lt;https://jarviscdr.github.io&gt;</code></p><p><a href="https://jarviscdr.github.io/">引用方式</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># 引用方式</span><br>[<span class="hljs-string">JarvisBlog</span>][<span class="hljs-symbol">1</span>]<br><br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">https://jarviscdr.github.io</span><br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="默认图片"><a href="#默认图片" class="headerlink" title="默认图片"></a>默认图片</h4><p><img src="https://s2.loli.net/2023/08/03/PrGmgCE1qacUylv.png" alt="图片描述"><br><code>![图片描述](https://s2.loli.net/2023/08/03/PrGmgCE1qacUylv.png)</code></p><h4 id="图文混排"><a href="#图文混排" class="headerlink" title="图文混排"></a>图文混排</h4><div align=right>    图文混排    <img src="https://s2.loli.net/2023/08/03/PrGmgCE1qacUylv.png" alt="图片描述" width="30" height="30" style="background-color:transparent;" /></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 使用img标签可进行精细控制 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">right</span>&gt;</span><br>    图文混排<br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://s2.loli.net/2023/08/03/PrGmgCE1qacUylv.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片描述&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:transparent;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><hr><p><code>*** # 需要占据一行</code></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>默认</th><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td>value</td><td align="left">value</td><td align="center">value</td><td align="right">value</td></tr><tr><td>value</td><td align="left">value</td><td align="center">value</td><td align="right">value</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 默认  </span>|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<br>|<span class="hljs-string"> ----- </span>|<span class="hljs-string"> :----- </span>|<span class="hljs-string"> :------: </span>|<span class="hljs-string"> -----: </span>|<br>|<span class="hljs-string"> value </span>|<span class="hljs-string"> value  </span>|<span class="hljs-string">  value   </span>|<span class="hljs-string">  value </span>|<br>|<span class="hljs-string"> value </span>|<span class="hljs-string"> value  </span>|<span class="hljs-string">  value   </span>|<span class="hljs-string">  value </span>|<br></code></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>列表项1 <code>- 列表项1</code></li><li>列表项2 <code>- 列表项2</code></li><li>列表项3 <code>- 列表项3</code></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>列表项1 <code>1. 列表项1</code></li><li>列表项2 <code>2. 列表项2</code></li><li>列表项3 <code>3. 列表项3</code></li></ol><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><ol><li>有序列表1 <code>1. 有序列表1</code><ul><li>列表项1 <code>- 列表项1</code></li></ul></li><li>有序列表2 <code>2. 有序列表2</code><ul><li>列表项2 <code>- 列表项2</code></li></ul></li></ol><h3 id="待办列表"><a href="#待办列表" class="headerlink" title="待办列表"></a>待办列表</h3><ul><li><input disabled="" type="checkbox"> 这里是列表文本 <code>- [ ] 这里是列表文本</code></li><li><input checked="" disabled="" type="checkbox"> 这里是列表文本 <code>- [x] 这里是列表文本</code></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><ol><li>最外层<blockquote><ol start="2"><li>第一层嵌套<blockquote><ol start="3"><li>第二层嵌套</li></ol></blockquote></li></ol></blockquote></li></ol></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-quote">&gt; 1. 最外层</span><br>&gt;&gt; 2. 第一层嵌套<br>&gt;&gt;&gt; 3. 第二层嵌套<br></code></pre></td></tr></table></figure><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>右侧是注对应的编号. <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注链接">[1]</span></a></sup></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">右侧是注对应的编号. [^1]<br><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">脚注链接</span><br></code></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">​<span class="hljs-string">``</span><span class="hljs-string">`语言</span><br><span class="hljs-string">代码块</span><br><span class="hljs-string">​`</span><span class="hljs-string">``</span><br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注链接<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>常用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用命令</title>
    <link href="/2023/08/02/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/08/02/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Composer全局设置阿里镜像</span><br>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/<br><span class="hljs-comment"># Composer全局取消镜像</span><br>composer config -g --<span class="hljs-built_in">unset</span> repos.packagist<br><span class="hljs-comment"># Composer项目单独设置阿里镜像</span><br>composer config repo.packagist composer https://mirrors.aliyun.com/composer/<br><span class="hljs-comment"># Composer项目单独取消镜像</span><br>composer config --<span class="hljs-built_in">unset</span> repos.packagist<br><br><span class="hljs-comment"># 设置阿里NPM镜像</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br><br><span class="hljs-comment"># 设置alpinelinux镜像</span><br>sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories &amp;&amp; apk update &amp;&amp; apk upgrade<br><br><span class="hljs-comment"># 安装ssh和git</span><br>apk add openssh git<br><span class="hljs-comment"># 设置全局git账号</span><br>git config --global user.email <span class="hljs-string">&quot;jarviscdr@outlook.com&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;Jarvis&quot;</span><br><br><span class="hljs-comment"># Hexo 本地服务</span><br>hexo s -p 10002<br><span class="hljs-comment"># Hexo 文件生成监听</span><br>hexo g -w<br><span class="hljs-comment"># Hexo 部署</span><br>hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
      <tag>国内镜像</tag>
      
      <tag>Git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
